import {GLTFLoader} from 'three/examples/jsm/loaders/GLTFLoader'
import * as main from '../script'

//      Initializing loader module properties
//
//Object to store loaded models
//Add empty keys for each model loaded to calculate loading percentage
let models = {
    playerCharacter:null,
    centerCharacter:null,
    centerEmoji:null
}

//player animations are stored here
let playerAnimations = null

//assign the number assets imported in this module
const numberOfAssets = Object.keys(models).length

//value representing how much has loaded,
//ranging from 0 to 1. 
//Adds a percentage when an asset is loaded.
//Value should be 100 when all assets are loaded.
let loadedPercentage = 0 
//
//      end of Initializing loader module properties

//      Creating a progress bar
//
let progressBar = require('progressbar.js')
let loadingBar = new progressBar.Circle('#progress-bar-container' /* Element that will contain SVG generated by progressbar.js */,{ 
    //add necessary styling/properties. Refer https://progressbarjs.readthedocs.io/en/latest/api/shape/ 
    trailColor:"#cfcfcf",
    trailWidth:"7",
    strokeWidth:"7",
    color:'#91ABE8',
    text:{
        className:"progress-bar-text",
        autoStyleContainer:"false",
        style:{
            position:"absolute",
            top:"0px",
            width:"100%",
            height:"100%",
            color:"#fff",
            display:"flex",
            justifyContent:"center",
            alignItems:"center",
            fontWeight:"1000",
            zIndex:"3",
        }
    },
    step: function(state, circle) {
        var value = Math.round(circle.value() * 100);
        circle.setText(value);
        if(value >= 100){
            main.startSurvey()
        }
    },
    svgStyle:{
        position:"relative",
        strokeLinecap:"round",
        zIndex:"3"
    }
})

//set the progress bar value to 0
loadingBar.animate(loadedPercentage)
//
//      end of Creating a progress bar


//      Loading models
//
const gltfloader = new GLTFLoader()

//Boilerplate for importing a model. Change variable names and path to the asset
//Once a model is loaded, add it to the models object
/* 
gltfloader.load(
    'Model path',
    (gltf2) =>
    {
        models['modelKey'] = gltf2.scene; // adding the model to the models object
        //set initial properties here

        loadedPercentage += (1/numberOfAssets) //calculate the percentage the asset contributes to the total loadedPercentage
        loadingBar.animate(loadedPercentage) // animate the progress bar
        if(loadedPercentage >= 1){ //if loadedPercentage is 1, then the survey can start.
            //Call function to start the survey
        }
    }
)  
*/


//Importing player character
gltfloader.load(
    'Models/AnimationTest_V11-test.gltf',
    (gltf) =>
    {
        playerAnimations = gltf.animations
        let model = gltf.scene
        model.scale.set(.07,.07,.07)
        model.position.set(0,-.6, 2)

        models['playerCharacter'] = model; // adding the model to the models object

        loadedPercentage += (1/numberOfAssets) //calculate the percentage the asset contributes to the total loadedPercentage
        loadingBar.animate(loadedPercentage) // animate the progress bar
        // if(loadedPercentage >= 1){ //if loadedPercentage is 1, then the survey can start.
        //     //Call function to start the survey
        //     main.startSurvey()
        // }
    }
)  

gltfloader.load(
    'Models/AnimationTest_V11-test.gltf',
    (gltf) =>
    {
        let model = gltf.scene
        model.scale.set(.07,.07,.07)
        model.position.set(0,-.6, 0)

        models['centerCharacter'] = model// test center model.

        loadedPercentage += (1/numberOfAssets) //calculate the percentage the asset contributes to the total loadedPercentage
        loadingBar.animate(loadedPercentage) // animate the progress bar
        // if(loadedPercentage >= 1){ //if loadedPercentage is 1, then the survey can start.
        //     //Call function to start the survey
        //     main.startSurvey()
        // }
    }
)

gltfloader.load(
    'Models/Emojis/love/scene.gltf',
    (gltf) =>
    {
        let model = gltf.scene
        model.scale.set(.06,.06,.06)
        model.position.set(1.5,-0.3, 0)

        models['centerEmoji'] = model

        loadedPercentage += (1/numberOfAssets) //calculate the percentage the asset contributes to the total loadedPercentage
        loadingBar.animate(loadedPercentage) // animate the progress bar
        // if(loadedPercentage >= 1){ //if loadedPercentage is 1, then the survey can start.
        //     //Call function to start the survey
        //     main.startSurvey()
        // }
    }
)


//
//      end of Loading models


export function getModel(modelKey){
    return models[modelKey]
}

export function getPlayerAnimations(){
    return playerAnimations
}