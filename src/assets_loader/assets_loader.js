import {GLTFLoader} from 'three/examples/jsm/loaders/GLTFLoader'
import * as main from '../script'
import * as scenes from '../questions/scenes'
import * as uiControl from '../ui_controller/ui_controller'
import * as THREE from 'three'
import { fresnel } from '../shader'
import { shaderMaterial, shaderUnlit } from '../fresnel'


//      Initializing loader module properties
//
//Object to store loaded models
//Add empty keys for each model loaded to calculate loading percentage
let models = {
    playerCharacter:null,
    playerOutline:null,
    distantFriend:null,
    mother:null,
    Father:null,
    siblings:null,
    friends:null,
    community:null,
    centerEmoji:null,
    sriLankaMap:null,
    sriLankaProvincesMap:null,
    maldivesMap:null,
    Tree1:null,
    Tree2:null,
    Tree3:null,
    Tree4:null,
    Tree5:null,
    Tree6:null,
    Tree7:null,
    Tree8:null,
    Tree9:null,
    Tree10:null,
    cloud1:null,
    cloud2:null,
    cloud3:null,
    carpet:null,
    lamp:null,
    sofa:null,
    sofasmall:null,
    letter:null
}

//player animations are stored here
let animations = {
    playerCharacter:null,
    playerOutline:null,
    distantFriend:null,
    centerEmoji:null,
    father:null,
    mother:null,
    siblings:null,
    friends:null,
    community:null
}

let animationId = {
    playerCharacter:{
        'idle':0,   //0
        'startL':5, //2
        'walkL':6,  //3
        'stopL':7,  //4 
        'startR':8, //5
        'walkR':9,  //6
        'stopR':10, //7
        'jumpStart':2,
        'onJump':3,
        'jumpStop':4
    },
    playerOutline:{
        'idle':0,
        'walk':2,
        'start':1,
        'stop':3
    },
    distantFriend:{
        'idle':1
    },
    father:{
        'idle':1
    },
    mother:{
        'idle':1
    },
    siblings:{
        'idle':1
    },
    friends:{
        'idle':1
    }
}

//assign the number assets imported in this module
const numberOfAssets = Object.keys(models).length

//value representing how much has loaded,
//ranging from 0 to 1. 
//Adds a percentage when an asset is loaded.
//Value should be 100 when all assets are loaded.
let loadedPercentage = 0 
//
//      end of Initializing loader module properties

//      Creating a progress bar
//
let progressBar = require('progressbar.js')
let loadingBar = new progressBar.Circle('#progress-bar-container' /* Element that will contain SVG generated by progressbar.js */,{ 
    //add necessary styling/properties. Refer https://progressbarjs.readthedocs.io/en/latest/api/shape/ 
    trailColor:"#cfcfcf",
    trailWidth:"7",
    strokeWidth:"7",
    color:'url(#loading-bar-gradient)',
    text:{
        className:"progress-bar-text",
        autoStyleContainer:"false",
        style:{
            position:"absolute",
            top:"0px",
            width:"100%",
            height:"100%",
            color:"white",
            display:"flex",
            justifyContent:"center",
            alignItems:"center",
            fontWeight:"600",
            zIndex:"3",
            fontFamily: '"Rubik",sans-serif',
            fontSize: '1em',
            opacity:'0.8'
        }
    },
    step: function(state, circle) {
        var value = Math.round(circle.value() * 100);
        circle.setText(value);
        if(value >= 100){
            // main.startSurvey()
            uiControl.enableStartSurvey()
        }
    },
    svgStyle:{
        position:"relative",
        strokeLinecap:"round",
        zIndex:"3"
    }
})

const loadingBarGradient = `
    <defs>
        <linearGradient id="loading-bar-gradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" style="stop-color:#FF9494;stop-opacity:1" />
            <stop offset="100%" style="stop-color:#DAFD04;stop-opacity:1" />
        </linearGradient>
    </defs>
`

loadingBar.svg.insertAdjacentHTML('afterbegin',loadingBarGradient)

//set the progress bar value to 0
loadingBar.animate(loadedPercentage)
//
//      end of Creating a progress bar


//      Loading models
//
const gltfloader = new GLTFLoader()

//Boilerplate for importing a model. Change variable names and path to the asset
//Once a model is loaded, add it to the models object
/* 
gltfloader.load(
    'Model path',
    (gltf2) =>
    {
        models['modelKey'] = gltf2.scene; // adding the model to the models object
        //set initial properties here

        loadedPercentage += (1/numberOfAssets) //calculate the percentage the asset contributes to the total loadedPercentage
        loadingBar.animate(loadedPercentage) // animate the progress bar
        if(loadedPercentage >= 1){ //if loadedPercentage is 1, then the survey can start.
            //Call function to start the survey
        }
    }
)  
*/
const fiveTone = new THREE.DataTexture(
    Uint8Array.from([0, 0, 0, 255 ,
        64, 64,64,255,
         128, 128, 128, 255,
         180,180,180,255,
          255, 255, 255,255])
          ,5,1,THREE.RGBAFormat
);

const threeTone = new THREE.DataTexture(
    Uint8Array.from([0, 0, 0, 255 ,
         128, 128, 128, 255,
          255, 255, 255,255])
          ,3,1,THREE.RGBAFormat
);

const tex = new THREE.TextureLoader().load('Textures/grad.png');
tex.minFilter = THREE.NearestFilter;
tex.magFilter = THREE.NearestFilter;

//Importing player character
gltfloader.load(
    'Models/Animation_V09.gltf',       //'Models/toonwalk_character.gltf'
    (gltf) =>
    {
        animations['playerCharacter'] = gltf.animations
        let model = gltf.scene
        model.name = 'player';
        model.scale.set(.3,.3,.3)        //0.07 prev
        model.position.set(0,-.6, 2)

        var toonMaterial = new THREE.MeshToonMaterial({ color : 0xFFC332, gradientMap : tex});
        //toonMaterial = new THREE.MeshStandardMaterial({color : 0xFFC332, roughness : 0.8, metalness : 0.2});
        const shader = {
            'outline' :
            {
                vertex_shader: [
                    "uniform float offset;",
                    "void main() {",
                    "vec4 pos = modelViewMatrix * vec4( position + normal * offset, 1.0 );",
                    "gl_Position = projectionMatrix * pos;",
                    "}"
                ].join("\n"),
    
                fragment_shader: [
                    "void main(){",
                    "gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );",
                    "}"
                ].join("\n")
            }
        };
        const outShader = shader['outline'];
        const uniforms = {offset: {
            type: "f",
            value: 1}
        };

        const matShader = new THREE.ShaderMaterial({
            uniforms: uniforms,
            vertexShader: outShader.vertex_shader,
            fragmentShader: outShader.fragment_shader
        });
        matShader.depthWrite = false;

        model.traverse((child) => {
            if (child.isMesh){
                //new THREE.MeshBasicMaterial({color : 0xFFC332});
                child.material = shaderMaterial; // material of the player character
                child.castShadow = true;
                child.rotation.set(3.5, 0, 0);
            }
        });

        models['playerCharacter'] = model; // adding the model to the models object

        loadedPercentage += (1/numberOfAssets) //calculate the percentage the asset contributes to the total loadedPercentage
        loadingBar.animate(loadedPercentage) // animate the progress bar
        // if(loadedPercentage >= 1){ //if loadedPercentage is 1, then the survey can start.
        //     //Call function to start the survey
        //     main.startSurvey()
        // }
    }
)  

gltfloader.load(
    'Models/Animation_V05.gltf',
    (gltf) =>
    {
        animations['playerOutline'] = gltf.animations
        let model = gltf.scene
        model.name = 'playerOutline'
        model.scale.set(.34,.33,.33)
        model.position.set(0,-.6, 0)

        const mat = new THREE.MeshLambertMaterial({ color:'black', side : THREE.BackSide});


        model.traverse((child) => {
            if (child.isMesh){
                child.material = mat;
            }
        });

        // mat.onBeforeCompile = (shader) => {
        //     const token = `#include <begin_vertex>`
        //     const customTransform = `
        //         vec3 transformed = vec3(position)  + objectNormal*0.006;
        //     `
        //     shader.vertexShader = 
        //         shader.vertexShader.replace(token,customTransform)
        // }

        models['playerOutline'] = model// test center model.
        loadedPercentage += (1/numberOfAssets)
        loadingBar.animate(loadedPercentage)
    }
)

gltfloader.load(
    'Models/Animation_V09.gltf',
    (gltf) =>
    {
        animations['distantFriend'] = gltf.animations
        let model = gltf.scene
        model.name = 'distantFriend'
        model.scale.set(.3,.3,.3)
        model.position.set(0,-.6, 0)

        model.traverse((child) => {
            if (child.isMesh){
                let toonMaterial = new THREE.MeshToonMaterial({ color : 0xFFC332, gradientMap : tex});
                child.material = shaderMaterial;
                child.castShadow = true;
            }
        });

        models['distantFriend'] = model// test center model.
        loadedPercentage += (1/numberOfAssets)
        loadingBar.animate(loadedPercentage)
    }
)

gltfloader.load(
    'Models/mom.gltf',
    (gltf) =>
    {
        animations['mother'] = gltf.animations
        let model = gltf.scene
        model.name = 'mother'
        model.scale.set(.075,.075,.075)
        model.position.set(0,-.6, 0)

        model.traverse((child) => {
            if (child.isMesh){
                let toonMaterial = new THREE.MeshToonMaterial({ color : 0xFFC332, gradientMap : tex});
                child.material = shaderMaterial;
                child.castShadow = true;
            }
        });

        models['mother'] = model
        loadedPercentage += (1/numberOfAssets)
        loadingBar.animate(loadedPercentage)
    }
)

var group = new THREE.Group();
gltfloader.load(
    'Models/father.gltf',
    (gltf) =>
    {
        animations['father'] = gltf.animations
        let model = gltf.scene
        model.name = 'father'
        model.scale.set(0.04,0.04,0.04)
        model.position.set(0,-.6, 0)

        //
        model.traverse((child) => {
            if (child.isMesh){
                if(child.name == 'Father'){
                    child.material = shaderMaterial;
                    child.castShadow = true;
                }
            }
        });

        models['father'] = model
        loadedPercentage += (1/numberOfAssets)
        loadingBar.animate(loadedPercentage)
    }
)

gltfloader.load(
    'Models/siblings.gltf',
    (gltf) =>
    {
        animations['siblings'] = gltf.animations
        let model = gltf.scene
        model.name = 'siblings'
        model.scale.set(.075,.075,.075)
        model.position.set(0,-.6, 0)

        model.traverse((child) => {
            if (child.isMesh){
                let toonMaterial = new THREE.MeshToonMaterial({ color : 0xFFC332, gradientMap : tex});
                child.material = shaderMaterial;
                child.castShadow = true;
            }
        });

        models['siblings'] = model
        loadedPercentage += (1/numberOfAssets)
        loadingBar.animate(loadedPercentage)
    }
)

gltfloader.load(
    'Models/Friends.gltf',
    (gltf) =>
    {
        animations['friends'] = gltf.animations
        let model = gltf.scene
        model.name = 'friends'
        model.scale.set(.075,.075,.075)
        model.position.set(0,-.6, 0)

        model.traverse((child) => {
            if (child.isMesh){
                let toonMaterial = new THREE.MeshToonMaterial({ color : 0xFFC332, gradientMap : tex});
                child.material = shaderMaterial;
                child.castShadow = true;
            }
        });

        models['friends'] = model
        loadedPercentage += (1/numberOfAssets)
        loadingBar.animate(loadedPercentage)
    }
)

gltfloader.load(
    'Models/community.gltf',
    (gltf) =>
    {
        //animations['community'] = gltf.animations
        let model = gltf.scene
        model.name = 'community'
        model.scale.set(.035,.035,.035)     //prev (.075,.075,.075)
        model.position.set(0,-.6, 0)

        // model.traverse((child) => {
        //     if (child.isMesh){
        //         child.material = shaderMaterial;
        //         child.castShadow = true;
        //     }
        // });

        models['community'] = model
        loadedPercentage += (1/numberOfAssets)
        loadingBar.animate(loadedPercentage)
    }
)

gltfloader.load(
    'Models/carpet.gltf',
    (gltf) =>
    {
        let model = gltf.scene
        model.name = 'carpet'
        model.scale.set(.075,.075,.075)
        model.position.set(0,-.6, 0)

        models['carpet'] = model
        loadedPercentage += (1/numberOfAssets)
        loadingBar.animate(loadedPercentage)
    }
)

gltfloader.load(
    'Models/lamp.gltf',
    (gltf) =>
    {
        let model = gltf.scene
        model.name = 'lamp'
        model.scale.set(.075,.075,.075)
        model.position.set(0,-.6, 0)

        models['lamp'] = model
        loadedPercentage += (1/numberOfAssets)
        loadingBar.animate(loadedPercentage)
    }
)

gltfloader.load(
    'Models/Sofa.gltf',
    (gltf) =>
    {
        let model = gltf.scene
        model.name = 'sofa'
        model.scale.set(.075,.075,.075)
        model.position.set(0,-.6, 0)

        models['sofa'] = model
        loadedPercentage += (1/numberOfAssets)
        loadingBar.animate(loadedPercentage)
    }
)

gltfloader.load(
    'Models/SofaSmall.gltf',
    (gltf) =>
    {
        let model = gltf.scene
        model.name = 'sofasmall'
        model.scale.set(.075,.075,.075)
        model.position.set(0,-.6, 0)

        models['sofasmall'] = model
        loadedPercentage += (1/numberOfAssets)
        loadingBar.animate(loadedPercentage)
    }
)

gltfloader.load(
    'Models/letter.gltf',
    (gltf) =>
    {
        let model = gltf.scene
        model.name = 'letter'
        model.scale.set(0.2,0.2,0.2)
        model.position.set(0,-0.6, 0)

        models['letter'] = model
        loadedPercentage += (1/numberOfAssets)
        loadingBar.animate(loadedPercentage)
    }
)

gltfloader.load(
    'Models/Emojis/love/scene.gltf',
    (gltf) =>
    {
        let model = gltf.scene
        model.scale.set(.06,.06,.06)
        model.position.set(1.5,-0.3, 0)

        models['centerEmoji'] = model

        loadedPercentage += (1/numberOfAssets) //calculate the percentage the asset contributes to the total loadedPercentage
        loadingBar.animate(loadedPercentage) // animate the progress bar
        // if(loadedPercentage >= 1){ //if loadedPercentage is 1, then the survey can start.
        //     //Call function to start the survey
        //     main.startSurvey()
        // }
    }
)

//#region Loading province models
gltfloader.load(
    'New Sri Lankan Provinces.glb',
    (gltf) =>
    {
        let model = gltf.scene
        model.scale.set(0.75,0.75,0.75)
        model.position.set(-1, 0, 0.5)

        models['sriLankaProvincesMap'] = model
        
        //Setting up model for country selection
        // let countrySelectionModel = models['sriLankaProvincesMap'].clone(true)
        // countrySelectionModel.scale.set(0.35,0.35,0.35)
        // countrySelectionModel.position.set(-.4,0,0.1)
        // countrySelectionModel.children[10].castShadow = true
        // // console.log(countrySelectionModel);


        // scenes.sriLankaCube.add(countrySelectionModel)

        // //Storing state colors as new properties
        // scenes.sriLankaCube.regionMaterial = countrySelectionModel.children[0].material//Material for all regions

        // scenes.sriLankaCube.standardColor = countrySelectionModel.children[0].material.color.clone()//standard color
        // scenes.sriLankaCube.hoveringColor =  new THREE.Color( 0xff0000 )//hovering color
        // scenes.sriLankaCube.selectedColor = new THREE.Color( 0x0000ff )//selected color


        //Setting up model for region selection
        let regionSelectionModel = models['sriLankaProvincesMap'].clone(true) 
        regionSelectionModel.scale.set(0.5,0.5,0.5)
        regionSelectionModel.position.set(-0.5, 0, 0.5)

        regionSelectionModel.children[10].castShadow = true
        // console.log(regionSelectionModel);
        scenes.sriLankaScene.add(regionSelectionModel)

        //Setting up and filtering regions and setting up region state colors
        let sriLankaRegions = regionSelectionModel.children.slice() //Region references
        sriLankaRegions.splice(9,2)//Removes sealine and provincial divider from regions references
        sriLankaRegions.forEach(region => {
            region.name = region.name.replaceAll('_',' ')

            region.standardMaterial = region.material.clone()//standard material
            region.material = region.standardMaterial

            region.hoveringMaterial = region.material.clone()//hovering material
            region.hoveringMaterial.color = new THREE.Color( 0xff0000 )

            region.selectedMaterial = region.material.clone()//selected material
            region.selectedMaterial.color = new THREE.Color( 0x0000ff )


        });

        model.castShadow = true
        model.receiveShadow = true

        scenes.setSriLankaRegions(sriLankaRegions)

        loadedPercentage += (1/numberOfAssets) //calculate the percentage the asset contributes to the total loadedPercentage
        loadingBar.animate(loadedPercentage) // animate the progress bar
        // if(loadedPercentage >= 1){ //if loadedPercentage is 1, then the survey can start.
        //     //Call function to start the survey
        //     main.startSurvey()
        // }
    }
)

gltfloader.load(
    'Maldives provinces.glb',
    (gltf) =>
    {
        let model = gltf.scene
        model.scale.set(0.38,0.38,0.38)
        model.position.set(0, 0, 0)

        models['maldivesMap'] = model
        
        //Setting up model for country selection
        let countrySelectionModel = models['maldivesMap'].clone(true)
        countrySelectionModel.scale.set(0.2,0.2,0.2)
        countrySelectionModel.position.set(0,0,0)
        countrySelectionModel.children[4].castShadow = true
        scenes.maldivesCube.add(countrySelectionModel)
        

        scenes.maldivesCube.regionMaterial = countrySelectionModel.children[0].material//Material for all regions

        scenes.maldivesCube.standardColor = countrySelectionModel.children[0].material.color.clone()//standard color
        scenes.maldivesCube.hoveringColor = new THREE.Color( 0xff0000 )//hovering color
        scenes.maldivesCube.selectedColor = new THREE.Color( 0x0000ff )//selected color

        //Setting up model for region selection
        let regionSelectionModel = models['maldivesMap'].clone(true) 
        regionSelectionModel.children[4].castShadow = true
        scenes.maldivesScene.add(regionSelectionModel)

        //Setting up and filtering regions and setting up region state colors
        let maldivesRegions = regionSelectionModel.children.slice() //Region references
        maldivesRegions.splice(4,1)//Removes sealine from regions references
        

        for (let i = 0; i < maldivesRegions.length; i++) {
            const region = maldivesRegions[i];
            region.name = region.name.replaceAll('_',' ')
            scenes.maldivesRegionBoxes[i].name = region.name
            scenes.maldivesRegionBoxes[i].position.copy(region.position)

            // scenes.maldivesRegionBoxes[i].add(region)
            // region.position.set(0,0,0)


            // region.standardMaterial = region.material.clone()//standard material
            // region.material = region.standardMaterial

            scenes.maldivesRegionBoxes[i].regionMaterial = region.material.clone()
            scenes.maldivesRegionBoxes[i].regionPosition = region.position
            region.material = scenes.maldivesRegionBoxes[i].regionMaterial

            scenes.maldivesRegionBoxes[i].standardColor = scenes.maldivesRegionBoxes[i].regionMaterial.color
            scenes.maldivesRegionBoxes[i].hoveringColor = new THREE.Color( 0xff0000 )

            scenes.maldivesRegionBoxes[i].selectedColor = new THREE.Color( 0x0000ff )
            
        }
        

        model.castShadow = true
        model.receiveShadow = true

        // scenes.setMaldivesRegions(maldivesRegions)

        loadedPercentage += (1/numberOfAssets) //calculate the percentage the asset contributes to the total loadedPercentage
        loadingBar.animate(loadedPercentage) // animate the progress bar
        // if(loadedPercentage >= 1){ //if loadedPercentage is 1, then the survey can start.
        //     //Call function to start the survey
        //     main.startSurvey()
        // }
    }
)

gltfloader.load(
    'srilanka_cartoon_map.glb',
    (gltf) =>
    {
        let model = gltf.scene

        models['sriLankaMap'] = model.children[1]

        let countrySelectionModel = models['sriLankaMap'].clone(true)
        countrySelectionModel.scale.set(0.18,0.18,0.18)
        countrySelectionModel.position.set(0.24,0,0.1)
        countrySelectionModel.castShadow = true
        // console.log(countrySelectionModel);


        scenes.sriLankaCube.add(countrySelectionModel)


        //Storing state colors as new properties
        scenes.sriLankaCube.regionMaterial = countrySelectionModel.material //Material for all regions
        countrySelectionModel.material.needsUpdate = true

        scenes.sriLankaCube.standardMap = new THREE.TextureLoader().load('sri_lanka_standard.png')
        scenes.sriLankaCube.standardMap.needsUpdate = true
        scenes.sriLankaCube.standardMap.flipY = false
        scenes.sriLankaCube.regionMaterial.map = scenes.sriLankaCube.standardMap

        scenes.sriLankaCube.hoveringMap =  new THREE.TextureLoader().load('sri_lanka_hovering.png')
        scenes.sriLankaCube.hoveringMap.needsUpdate = true
        scenes.sriLankaCube.hoveringMap.flipY = false
        
        scenes.sriLankaCube.selectedMap = new THREE.TextureLoader().load('sri_lanka_selected.png')
        scenes.sriLankaCube.selectedMap.needsUpdate = true
        scenes.sriLankaCube.selectedMap.flipY = false



        console.log(models['sriLankaMap']);
        
        loadedPercentage += (1/numberOfAssets) //calculate the percentage the asset contributes to the total loadedPercentage
        loadingBar.animate(loadedPercentage) // animate the progress bar
        // if(loadedPercentage >= 1){ //if loadedPercentage is 1, then the survey can start.
        //     //Call function to start the survey
        //     main.startSurvey()
        // }
    }
)
//#endregion

//#region Loading tree models
gltfloader.load(
    'Tree.glb',
    (gltf) =>
    {
        let model = gltf.scene
        model.name = 'Tree'
        model.position.set(0, -0.3, 0)
        model.scale.set(0.25,0.25,0.25)

        models['Tree1'] = model
        SetTreeMaterial(model);

        loadedPercentage += (1/numberOfAssets) //calculate the percentage the asset contributes to the total loadedPercentage
        loadingBar.animate(loadedPercentage)
    }
)

gltfloader.load(
    'Tree.glb',
    (gltf) =>
    {
        let model = gltf.scene
        model.name = 'Tree2'
        model.position.set(0, -0.3, 0)
        model.scale.set(0.25,0.25,0.25)

        models['Tree2'] = model
        SetTreeMaterial(model);

        loadedPercentage += (1/numberOfAssets) //calculate the percentage the asset contributes to the total loadedPercentage
        loadingBar.animate(loadedPercentage)
    }
)

gltfloader.load(
    'Tree.glb',
    (gltf) =>
    {
        let model = gltf.scene
        model.name = 'Tree3'
        model.position.set(0, -0.3, 0)
        model.scale.set(0.25,0.25,0.25)

        models['Tree3'] = model
        SetTreeMaterial(model)

        loadedPercentage += (1/numberOfAssets) //calculate the percentage the asset contributes to the total loadedPercentage
        loadingBar.animate(loadedPercentage)
    }
)

gltfloader.load(
    'Tree.glb',
    (gltf) =>
    {
        let model = gltf.scene
        model.name = 'Tree4'
        model.position.set(0, -0.3, 0)
        model.scale.set(0.25,0.25,0.25)

        models['Tree4'] = model
        SetTreeMaterial(model)

        loadedPercentage += (1/numberOfAssets) //calculate the percentage the asset contributes to the total loadedPercentage
        loadingBar.animate(loadedPercentage)
    }
)


gltfloader.load(
    'Tree.glb',
    (gltf) =>
    {
        let model = gltf.scene
        model.name = 'Tree5'
        model.position.set(0, -0.3, 0)
        model.scale.set(0.25,0.25,0.25)

        models['Tree5'] = model
        SetTreeMaterial(model)

        loadedPercentage += (1/numberOfAssets) //calculate the percentage the asset contributes to the total loadedPercentage
        loadingBar.animate(loadedPercentage)
    }
)

gltfloader.load(
    'Tree.glb',
    (gltf) =>
    {
        let model = gltf.scene
        model.name = 'Tree6'
        model.position.set(0, -0.3, 0)
        model.scale.set(0.25,0.25,0.25)

        models['Tree6'] = model
        SetTreeMaterial(model)

        loadedPercentage += (1/numberOfAssets) //calculate the percentage the asset contributes to the total loadedPercentage
        loadingBar.animate(loadedPercentage)
    }
)

gltfloader.load(
    'Tree.glb',
    (gltf) =>
    {
        let model = gltf.scene
        model.name = 'Tree7'
        model.position.set(0, -0.3, 0)
        model.scale.set(0.25,0.25,0.25)

        models['Tree7'] = model
        SetTreeMaterial(model)

        loadedPercentage += (1/numberOfAssets) //calculate the percentage the asset contributes to the total loadedPercentage
        loadingBar.animate(loadedPercentage)
    }
)

gltfloader.load(
    'Tree.glb',
    (gltf) =>
    {
        let model = gltf.scene
        model.name = 'Tree8'
        model.position.set(0, -0.3, 0)
        model.scale.set(0.25,0.25,0.25)

        models['Tree8'] = model
        SetTreeMaterial(model)

        loadedPercentage += (1/numberOfAssets) //calculate the percentage the asset contributes to the total loadedPercentage
        loadingBar.animate(loadedPercentage)
    }
)

gltfloader.load(
    'Tree.glb',
    (gltf) =>
    {
        let model = gltf.scene
        model.name = 'Tree9'
        model.position.set(0, -0.3, 0)
        model.scale.set(0.25,0.25,0.25)

        models['Tree9'] = model
        SetTreeMaterial(model)

        loadedPercentage += (1/numberOfAssets) //calculate the percentage the asset contributes to the total loadedPercentage
        loadingBar.animate(loadedPercentage)
    }
)

gltfloader.load(
    'Tree.glb',
    (gltf) =>
    {
        let model = gltf.scene
        model.name = 'Tree10'
        model.position.set(0, -0.3, 0)
        model.scale.set(0.25,0.25,0.25)

        models['Tree10'] = model
        SetTreeMaterial(model)

        loadedPercentage += (1/numberOfAssets) //calculate the percentage the asset contributes to the total loadedPercentage
        loadingBar.animate(loadedPercentage)
    }
)
//#endregion

//#region Loading Cloud models
gltfloader.load(
    'cloud.glb',
    (gltf) =>
    {
        let model = gltf.scene
        model.name = 'Cloud'
        model.position.set(0, -0.3, 0)
        model.scale.set(0.05,0.05,0.05)

        models['cloud1'] = model

        let mesh = model.children[0].children[0].children[0].children[0];
        var col = mesh.material.color;
        var newMat = new THREE.MeshLambertMaterial( {color : col });
        mesh.material = newMat;
        mesh.material.transparent = true
        model.material = mesh.material

        loadedPercentage += (1/numberOfAssets) //calculate the percentage the asset contributes to the total loadedPercentage
        loadingBar.animate(loadedPercentage)
    }
)

gltfloader.load(
    'cloud.glb',
    (gltf) =>
    {
        let model = gltf.scene
        model.name = 'Cloud2'
        model.position.set(0, -0.3, 0)
        model.scale.set(0.05,0.05,0.05)

        models['cloud2'] = model

        let mesh = model.children[0].children[0].children[0].children[0];
        var col = mesh.material.color;
        var newMat = new THREE.MeshLambertMaterial( {color : col });
        mesh.material = newMat;
        mesh.material.transparent = true
        model.material = mesh.material

        loadedPercentage += (1/numberOfAssets) //calculate the percentage the asset contributes to the total loadedPercentage
        loadingBar.animate(loadedPercentage)
    }
)

gltfloader.load(
    'cloud.glb',
    (gltf) =>
    {
        let model = gltf.scene
        model.name = 'Cloud3'
        model.position.set(0, -0.3, 0)
        model.scale.set(0.05,0.05,0.05)

        models['cloud3'] = model

        let mesh = model.children[0].children[0].children[0].children[0];
        var col = mesh.material.color;
        var newMat = new THREE.MeshLambertMaterial( {color : col });
        mesh.material = newMat;
        mesh.material.transparent = true
        model.material = mesh.material

        model.children.forEach(child => {
            if(child.isMesh){
                // var col = child.material.color;
                // var newMat = new THREE.MeshLambertMaterial( {col });
                // child.material.color = newMat;
                console.log(child.name);
            }
        });

        loadedPercentage += (1/numberOfAssets) //calculate the percentage the asset contributes to the total loadedPercentage
        loadingBar.animate(loadedPercentage)
    }
)
//#endregion


function SetTreeMaterial(scene){
    scene.traverse( function(object){
        if(object.material){
            var col = 0x178BD4;     //prev 0xffa211
            var mat = new THREE.MeshToonMaterial( {color : col, gradientMap : tex});
            object.material = mat;
            object.castShadow = true;
            object.receiveShadow = true;
        }
    });
}

//
//      end of Loading models


export function getModel(modelKey){
    return models[modelKey]
}

export function getPlayerAnimations(){
    return animations['playerCharacter']
}

export function getOtherCharacterAnimations(animationKey){
    return animations[animationKey]
}

export function getAnimationIds(key){
    return animationId[key];
}